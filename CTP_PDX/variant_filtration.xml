<tool name="Variant_Filtration" walltime="1:00:00"
      error_strings="'##### ERROR MESSAGE:'">
    <description>
        Filter variants using depth and allele frequency cut-off
    </description>
    <!--
        Ins:
          1: variants_raw
        Outs:
          1: variants_filtered
    -->
    
    <!-- Step 4: Variant Calling -->
    <module>python/2.7.3</module>
    <module>java/1.7.0</module>


<file id="dbsnp" input="True"
        filespec="dbsnp_144.hg38.vcf.gz" />

 <file id="snpSift" input="True"
        filespec="snpEff/4.1g/SnpSift.jar" />
<file id="vcf1" temp="True"
        based_on="in_1" append=".DPfiltered.tmp.vcf" />
<file id="vcf2" temp="True"
        based_on="in_1" append=".additionalfilters.tmp.vcf" />

<validate id="snpSift" />

    <command program="allele_depth_min_and_AF_from_ADs.py">
        <!-- Compute coverage depth by adding allele counts.
             Compute allele frequencies from allele counts.
             Filter out any reads that don't have a minimum coverage
             of 140.
        -->
        <version_command>allele_depth_min_and_AF_from_ADs.py -v</version_command>
        {in_1} {vcf1} 140
    </command>


 <command program="java">
        <version_command>java -jar {snpSift} 2>&amp;1 | grep version</version_command>
        -jar {snpSift} annotate -id {dbsnp} {vcf1} > {vcf2}
    </command>



 <command program="java">
        <!-- Flag algorithmically identified false positive variants 
                        and 
            variants with Allele Frequency < 5%.
        -->
        <version_command>java -jar {snpSift} 2>&amp;1 | grep version</version_command>
        -jar {snpSift} filter --addFilter "lowAF" --rmFilter "PASS"  'ALT_AF[ANY] &lt; 5' {vcf2}  >  {out_1}
    </command>




</tool>
